# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the OCDS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: OCDS 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-08 14:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../standard/docs/en/implementation/serialization.md
msgid "Serialization"
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:3
msgid ""
"The Open Contracting Data Standard provides a **structured data model** "
"for capturing in-depth information about all stages of the contracting "
"process."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:5
msgid ""
"The current canonical version of this data model is provided by a **[JSON"
" Schema](../../../schema/release)** which describes field names, field "
"definitions and structures for the data. The compliance of data with the "
"Open Contracting Data Standard will be assessed against this schema."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:7
msgid ""
"However, there are many use cases where publishers and users will want to"
" work with data serialized in other formats. For this reason, the current"
" version of OCDS supports a number of **secondary serializations** which "
"are based on the canonical schema. There are not currently official "
"components of the standard, but are designed to support implementers in "
"providing accessible data to a range of different users."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md
msgid "JSON"
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:11
msgid ""
"JSON stands for Javascript Object Notation, and is a format widely used "
"for the exchange of data on the web. The JSON schema language provides "
"validation tools for working with JSON data."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md
msgid "Generating JSON"
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:15
msgid "Most programming languages provide tools for output data as JSON."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:17
msgid ""
"The [OCDS Mapper](https://github.com/open-contracting/mapper) tool can "
"convert from flat CSV files to structured OCDS data based on a mapping "
"template."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:19
msgid ""
"[A range of tools](http://json-schema.org/implementations.html) are "
"available for working with [JSON-Schema](http://json-schema.org/), "
"including validation and form generation tools."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md
msgid "Consuming JSON"
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:23
msgid "Most programming languages provide tools for reading JSON."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:25
msgid ""
"A number of [JSON native databases](http://en.wikipedia.org/wiki/NoSQL) "
"are available for working directly with large collections of JSON "
"documents, and command line tools such as "
"[jq](http://stedolan.github.io/jq/) support advanced query and data "
"retrieval with JSON files."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:27
msgid ""
"There are also a range of generic tools which can convert JSON into flat "
"CSV structures, including:"
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:29
msgid ""
"[JSON -> CSV](http://konklone.io/json/) - online tool for converting "
"small documents."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:30
msgid ""
"[Open Refine](http://openrefine.org/) - desktop tool that can handle "
"large documents, and supports advanced data manipulation."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md
msgid "CSV"
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:34
msgid ""
"JSON is based on a tree structure, with data elements nested inside one "
"another. However, many people are more familiar working with tabular "
"data, made up of columns and rows. There is no easy way to represent "
"structured data in a single table. However, we propose two models for "
"publishers to adopt."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:36
msgid ""
"**Simplified single table** - for cases where there are no one-to-many "
"relationships in the data (e.g. each tender has only one award and "
"contract, and each has only one line-item)."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:37
msgid ""
"**Multi-table** - where more advanced structures are required, but where "
"it is desirable to be able to work with data in spreadsheet-style layouts"
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:39
msgid ""
"In each case, fields are identified by the [json "
"pointer](http://tools.ietf.org/html/rfc6901) to their JSON equivalent. "
"For example:"
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:41
msgid "**JSON**"
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:51
msgid "**CSV**"
msgstr ""

#: ../../standard/docs/en/examples/serialization-flat.csv:1
#: ../../standard/docs/en/examples/serialization-flat-two-items.csv:1
msgid "ocid"
msgstr ""

#: ../../standard/docs/en/examples/serialization-flat.csv:1
#: ../../standard/docs/en/examples/serialization-flat-two-items.csv:1
msgid "tag"
msgstr ""

#: ../../standard/docs/en/examples/serialization-flat.csv:1
#: ../../standard/docs/en/examples/serialization-flat-two-items.csv:1
msgid "tender/id"
msgstr ""

#: ../../standard/docs/en/examples/serialization-flat.csv:1
msgid "tender/items/id"
msgstr ""

#: ../../standard/docs/en/examples/serialization-flat.csv:1
msgid "tender/items/description"
msgstr ""

#: ../../standard/docs/en/examples/serialization-flat.csv:1
#: ../../standard/docs/en/examples/serialization-flat-two-items.csv:1
msgid "ocds-a2ef3d01-1594121"
msgstr ""

#: ../../standard/docs/en/examples/serialization-flat.csv:1
#: ../../standard/docs/en/examples/serialization-flat-two-items.csv:1
msgid "tender"
msgstr ""

#: ../../standard/docs/en/examples/serialization-flat.csv:1
#: ../../standard/docs/en/examples/serialization-flat-two-items.csv:1
msgid "ocds-a2ef3d01-1594121/1"
msgstr ""

#: ../../standard/docs/en/examples/serialization-flat.csv:1
#: ../../standard/docs/en/examples/serialization-flat-two-items.csv:1
msgid "1"
msgstr ""

#: ../../standard/docs/en/examples/serialization-flat.csv:1
#: ../../standard/docs/en/examples/serialization-flat-two-items.csv:1
msgid "Standards development"
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:61
msgid ""
"A set of prototype tools for generating flat CSV OCDS templates are "
"[available on GitHub](https://github.com/open-contracting/flattening-"
"ocds), and the OCDS validator includes an option to generate 'flattened' "
"versions of JSON data."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md
msgid "Simplified single table"
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:65
msgid ""
"It is possible to represent a full releases in a single flat CSV row by "
"using full JSON pointers for each field as the headings."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:67
msgid ""
"This approach is generally only appropriate for data without one-to-many "
"relationships (for example, only one item per tender, and one award and "
"contract for each tender process)."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:69
msgid ""
"It is, however, theoretically possible to represent a full releases in a "
"single flat CSV row by using full JSON pointers for each field as the "
"headings. For arrays, this involves adding the array index to the path, "
"such as ```tender/item/0/id``` and ```tender/item/1/id``` as separate "
"columns to represent each of the items."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:71
msgid ""
"For example, to represent a tender release with two items, the CSV file "
"would include:"
msgstr ""

#: ../../standard/docs/en/examples/serialization-flat-two-items.csv:1
msgid "tender/items/0/id"
msgstr ""

#: ../../standard/docs/en/examples/serialization-flat-two-items.csv:1
msgid "tender/items/0/description"
msgstr ""

#: ../../standard/docs/en/examples/serialization-flat-two-items.csv:1
msgid "tender/items/1/id"
msgstr ""

#: ../../standard/docs/en/examples/serialization-flat-two-items.csv:1
msgid "tender/items/1/description"
msgstr ""

#: ../../standard/docs/en/examples/serialization-flat-two-items.csv:1
msgid "2"
msgstr ""

#: ../../standard/docs/en/examples/serialization-flat-two-items.csv:1
msgid "Documentation authoring"
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:81
msgid "The JSON equivalent of this would be:"
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:91
msgid ""
"Whilst this allows complex data to be expressed in flat CSV, users will "
"need to rebuild the structure in order to analyse the data."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:93
msgid ""
"Instead, data with a one-to-many relationship can be represented using a "
"multi-table serialization."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md
msgid "Multi-table"
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:97
msgid ""
"The multi-table serialization breaks key sections and building blocks of "
"OCDS into their own tables. This supports complex data structures with "
"one-to-many relationships, whilst allowing analysts to reconstruct the "
"views of data they need to carry out analysis."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:99
msgid ""
"Multiple tables can be packaged together as the tabs of a spreadsheet, or"
" using the Open Knowledge data package specification."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:101
msgid ""
"The OCDS approach to multi-table flat serializations is currently under "
"review. Contact the [helpdesk](../../../support/) if you wish to make use"
" of this."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md
msgid "Packaging files with meta-data"
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:105
msgid ""
"Whatever serialisation is used for Open Contracting Data, a single file "
"may contain one or more release and records."
msgstr ""

#: ../../standard/docs/en/implementation/serialization.md:107
msgid ""
"The release and record data package schemas describe the key meta-data "
"that must be supplied for any file providing Open Contracting Data. This "
"includes the publishedDate, publisher, uri for accessing the file, and "
"the licensing details for the file."
msgstr ""

#~ msgid ""
#~ "The Open Contracting Data Standard "
#~ "provides a structured data model for "
#~ "capturing in-depth information about all"
#~ " stages of the contracting process."
#~ msgstr ""

#~ msgid ""
#~ "The current canonical version of this"
#~ " data model is provided by a "
#~ "JSON Schema which describes field names,"
#~ " field definitions and structures for "
#~ "the data. The compliance of data "
#~ "with the Open Contracting Data Standard"
#~ " will be assessed against this "
#~ "schema."
#~ msgstr ""

#~ msgid ""
#~ "However, there are many use cases "
#~ "where publishers and users will want "
#~ "to work with data serialized in "
#~ "other formats. For this reason, the "
#~ "current version of OCDS supports a "
#~ "number of secondary serializations which "
#~ "are based on the canonical schema. "
#~ "There are not currently official "
#~ "components of the standard, but are "
#~ "designed to support implementers in "
#~ "providing accessible data to a range "
#~ "of different users."
#~ msgstr ""

#~ msgid ""
#~ "The OCDS Mapper tool can convert "
#~ "from flat CSV files to structured "
#~ "OCDS data based on a mapping "
#~ "template."
#~ msgstr ""

#~ msgid ""
#~ "A range of tools are available for"
#~ " working with JSON-Schema, including "
#~ "validation and form generation tools."
#~ msgstr ""

#~ msgid ""
#~ "A number of JSON native databases "
#~ "are available for working directly with"
#~ " large collections of JSON documents, "
#~ "and command line tools such as jq"
#~ " support advanced query and data "
#~ "retrieval with JSON files."
#~ msgstr ""

#~ msgid "JSON -> CSV - online tool for converting small documents."
#~ msgstr ""

#~ msgid ""
#~ "Open Refine - desktop tool that "
#~ "can handle large documents, and supports"
#~ " advanced data manipulation."
#~ msgstr ""

#~ msgid ""
#~ "Simplified single table - for cases "
#~ "where there are no one-to-many "
#~ "relationships in the data (e.g. each "
#~ "tender has only one award and "
#~ "contract, and each has only one "
#~ "line-item)."
#~ msgstr ""

#~ msgid ""
#~ "Multi-table - where more advanced "
#~ "structures are required, but where it"
#~ " is desirable to be able to "
#~ "work with data in spreadsheet-style "
#~ "layouts"
#~ msgstr ""

#~ msgid ""
#~ "In each case, fields are identified "
#~ "by the json pointer to their JSON"
#~ " equivalent. For example:"
#~ msgstr ""

#~ msgid ""
#~ "A set of prototype tools for "
#~ "generating flat CSV OCDS templates are"
#~ " available on GitHub, and the OCDS"
#~ " validator includes an option to "
#~ "generate 'flattened' versions of JSON "
#~ "data."
#~ msgstr ""

#~ msgid ""
#~ "It is, however, theoretically possible "
#~ "to represent a full releases in a"
#~ " single flat CSV row by using "
#~ "full JSON pointers for each field "
#~ "as the headings. For arrays, this "
#~ "involves adding the array index to "
#~ "the path, such as tender/item/0/id and"
#~ " tender/item/1/id as separate columns to"
#~ " represent each of the items."
#~ msgstr ""

#~ msgid ""
#~ "The OCDS approach to multi-table "
#~ "flat serializations is currently under "
#~ "review. Contact the helpdesk if you "
#~ "wish to make use of this."
#~ msgstr ""

